import 'package:flutter/material.dart';

import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {'primary': PrimaryColors()};

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {'primary': ColorSchemes.primaryColorScheme};

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }

    var colorScheme = _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      dividerTheme: DividerThemeData(
        thickness: 4,
        space: 4,
        color: appTheme.whiteA700.withOpacity(0.31),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blue200B2,
          fontSize: 16.fSize,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blue200B2,
          fontSize: 10.fSize,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.blue5001,
          fontSize: 24.fSize,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.blue5001,
          fontSize: 12.fSize,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.blue5002,
          fontSize: 20.fSize,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.blue5001,
          fontSize: 16.fSize,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.blue5001,
          fontSize: 14.fSize,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light();
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // BlueB
  Color get blue200B2 => Color(0XB2A4BFFF);

  // Blue
  Color get blue50 => Color(0XFFE9F0FF);
  Color get blue5001 => Color(0XFFEAF0FF);
  Color get blue5002 => Color(0XFFDFE8FF);
  Color get blue5003 => Color(0XFFDAE5FF);

  // BlueGray
  Color get blueGray300 => Color(0XFF8996B8);
  Color get blueGray30001 => Color(0XFF8996B7);

  // DeepPurple
  Color get deepPurple700 => Color(0XFF5438A2);

  // Gray
  Color get gray700 => Color(0XFF555B6A);
  Color get gray900 => Color(0XFF091227);

  // Green
  Color get greenA200 => Color(0XFF5CE9BD);

  // Indigo
  Color get indigo600 => Color(0XFF3657AA);
  Color get indigoA100 => Color(0XFF7694FF);

  // LightGreen
  Color get lightGreen900 => Color(0XFF366F28);

  // Lime
  Color get lime900 => Color(0XFFB26F14);

  // Pink
  Color get pink900 => Color(0XFF8C3243);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();

ThemeData ligtmode = ThemeData(
  visualDensity: VisualDensity.standard,
  colorScheme: ColorSchemes.primaryColorScheme,
  textTheme: TextThemes.textTheme(ColorSchemes.primaryColorScheme),
  scaffoldBackgroundColor: appTheme.gray900,
  dividerTheme: DividerThemeData(
    thickness: 4,
    space: 4,
    color: appTheme.whiteA700.withOpacity(0.31),
  ),
);

ThemeData darkmode = ThemeData(
  visualDensity: VisualDensity.standard,
  colorScheme: ColorScheme.dark(),
  textTheme: TextThemes.textTheme(ColorScheme.dark()),
  scaffoldBackgroundColor: appTheme.gray900,
  dividerTheme: DividerThemeData(
    thickness: 4,
    space: 4,
    color: appTheme.whiteA700.withOpacity(0.31),
  ),
);

ThemeData get lightMode => ligtmode;
ThemeData get darkMode => darkmode;
